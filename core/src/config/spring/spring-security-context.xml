<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">


	<beans:bean id="jdbcdataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName">
	    	<beans:value>com.mysql.jdbc.Driver</beans:value>
		</beans:property>
		<beans:property name="url">
	    	<beans:value>jdbc:mysql://localhost:3306/platform_users</beans:value>
		</beans:property>
		<beans:property name="username">
	    	<beans:value>root</beans:value>
		</beans:property>
		<beans:property name="password">
	    	<beans:value>root</beans:value>
		</beans:property>
	</beans:bean>
	<http auto-config='true'>
		<intercept-url  pattern="/home/**" access="ROLE_USER" />
		<intercept-url pattern="/jsp/login*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/jsp/login_error*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/jsp/codemirror.html" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<form-login login-page='/jsp/login' default-target-url="/home" authentication-failure-url="/jsp/login_error" />
        <logout invalidate-session="true" logout-success-url="/jsp/login"/>
        <session-management>
    		<concurrency-control max-sessions="1" expired-url= 
    "/jsp/login?error=expired"/>
  		</session-management>
	</http>

	<beans:bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
  		<beans:property name="userPropertyToUse" value="salt"/>
	</beans:bean>
	
 	<beans:bean id="jdbcUserServiceCustom" class="com.olive.security.CustomJdbcDaoImpl">
		<beans:property name="dataSource" ref="jdbcdataSource"/>
		 <beans:property name="enableGroups" value="true"/>
 		 <beans:property name="enableAuthorities" value="false"/>
 		 <beans:property name="usersByUsernameQuery">
	     	<beans:value>select username,password,enabled,
	     	salt from users where username = ?
    	 	</beans:value>
  		</beans:property>
	</beans:bean>

	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>

<!-- This is used to encrypt the users manually before the server startups.
	We can create a utility to encrypt uncrypted passwords.
 -->
<!-- 
	<beans:bean class="com.olive.security.DatabasePasswordSecurerBean" 
             init-method="secureDatabase" depends-on="jdbcdataSource">
  		<beans:property name="dataSource" ref="jdbcdataSource"/>
	</beans:bean>
 -->	
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="jdbcUserServiceCustom">
			<password-encoder ref="passwordEncoder">
				<salt-source ref="saltSource"/>
			</password-encoder>
		</authentication-provider>
	</authentication-manager>



<!-- 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="admin" authorities="ROLE_USER,ROLE_ADMIN" />
				<user name="demo" password="demo" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
-->

	<global-method-security pre-post-annotations="enabled" />

</beans:beans>
